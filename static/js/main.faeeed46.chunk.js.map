{"version":3,"sources":["components/layout/NavBar.js","components/ram/RAMCard.js","components/ram/RAMList.js","components/layout/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","Component","Sprite","styled","img","_templateObject","RAMCard","state","id","name","status","species","type","gender","imageUrl","ramIndex","_this$props","this","props","url","split","length","concat","setState","src","RAMList","ram","axios","get","res","data","Fragment","map","RAMCard_RAMCard","key","Dashboard","RAMList_RAMList","App","NavBar_NavBar","class","Dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.faeeed46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\n\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n                    <a href=\"\" className=\"navbar-brand col-sm-3 col-md-2 mr-0 align-items-center\">Christians Rick and Morty App!</a>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Sprite = styled.img`\r\n    width: 5em;\r\n    height: 5em;\r\n`;\r\n\r\nexport default class RAMCard extends Component {\r\n\r\n    state = {\r\n        id: '',\r\n        name: '',\r\n        status: '',\r\n        species: '',\r\n        type: '',\r\n        gender: '',\r\n        imageUrl: '',\r\n        ramIndex: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { id, name, status, species, type, gender, url } = this.props;\r\n        const ramIndex = url.split(\"/\")[url.split('/').length - 1];\r\n        const imageUrl = `https://rickandmortyapi.com/api/character/avatar/${ramIndex}.jpeg?raw=true`\r\n\r\n        this.setState({\r\n            id,\r\n            name,\r\n            status,\r\n            species,\r\n            type,\r\n            gender,\r\n            imageUrl,\r\n            ramIndex\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='col-md-3 col-sm-6 mb-5'>\r\n                <div className=\"card\">\r\n                    <h5 className=\"card-header\">{this.state.ramIndex}</h5>\r\n                    <Sprite className=\"card-img-top mx-auto mt-2 rounded\"\r\n                        src={this.state.imageUrl}\r\n                    />\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\">{this.state.name}</h4>\r\n                        <h6 className=\"card-title\">ID: {this.state.id}</h6>\r\n                        <h6 className=\"card-title\">Status: {this.state.status}</h6>\r\n                        <h6 className=\"card-title\">Species: {this.state.species}</h6>\r\n                        <h6 className=\"card-title\">Gender: {this.state.gender}</h6>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport RAMCard from './RAMCard';\r\n\r\nexport default class RAMList extends Component {\r\n    state = {\r\n        url: \"https://rickandmortyapi.com/api/character/\",\r\n        ram: null\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get(this.state.url);\r\n        this.setState({ ram: res.data['results'] });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.ram ? (\r\n                    <div className=\"row\">\r\n                        {this.state.ram.map(ram => (\r\n                            <RAMCard\r\n                                key={ram.name}\r\n                                id={ram.id}\r\n                                name={ram.name}\r\n                                status={ram.status}\r\n                                species={ram.species}\r\n                                type={ram.type}\r\n                                gender={ram.gender}\r\n                                url={ram.url}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                        <h1>Loading...</h1>\r\n                    )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport RAMList from '../ram/RAMList';\r\n\r\nexport default class Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <RAMList />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport NavBar from \"./components/layout/NavBar\";\nimport Dashboard from './components/layout/Dashboard';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <div class=\"container\">\n          <Dashboard></Dashboard>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}